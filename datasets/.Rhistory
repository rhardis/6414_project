Xpred_num = data.matrix(trainData[,1:12])
out = leaps(Xpred_num, prodebt, method = "Cp")
library(leaps)
attach(trainData)
Xpred_num = data.matrix(trainData[,1:12])
out = leaps(Xpred_num, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
library(leaps)
attach(trainData)
xpred = data.matrix(trainData[,1:12])
out = leaps(xpred, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
library(leaps)
attach(trainData)
Xpred_num = data.matrix(trainData[,1:12])
out = leaps(Xpred_num, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
library(leaps)
attach(trainData)
Xpred_num <- data.matrix(trainData[,1:12])
out <- leaps(Xpred_num, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
#cat_vars <- cbind(incomegp, house, singpar, agegp, bankacc, bsocacc, manage, ccarduse, cigbuy, xmasbuy)
#reg_subsets.out = regsubsets(trainData$prodebt ~ .,data=trainData,  nbest = 1, nvmax = NULL, force.in = NULL, force.out = NULL, method = "exhaustive")
#plot(reg_subsets.out, scale = 'Cp')
library(leaps)
attach(trainData)
Xpred_num = data.matrix(trainData[,1:12])
out = leaps(Xpred_num, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
library(leaps)
attach(trainData)
xpred = data.matrix(trainData[,1:12])
out = leaps(xpred, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
knitr::opts_chunk$set(echo = TRUE)
# Transform the categorical variables into dummy vars
require(faraway)
data(debt)
fullData=na.omit(debt)
fullData$ccarduse = as.factor(fullData$ccarduse)
fullData$incomegp = as.factor(fullData$incomegp)
fullData$house = as.factor(fullData$house)
fullData$agegp = as.factor(fullData$agegp)
fullData$manage = as.factor(fullData$manage)
#dmy = dummyVars(" ~ .", data = fullData)
#fullData = data.frame(predict(dmy, newdata = fullData))
set.seed(190)
testRows=sample(nrow(fullData),0.1*nrow(fullData))
testData=fullData[testRows, ]
trainData=fullData[-testRows, ]
slr = glm(prodebt ~., data = trainData)
summary(slr)
library(boot)
cv.glm(trainData, slr, K= 10)$delta[1]
cv.glm(trainData, slr, K= nrow(trainData))$delta[1]
library(CombMSC)
slm = lm(prodebt~.,data=trainData)
s2 = summary(slm)$sigma**2
n = nrow(trainData)
c(Mallows_CP = Cp(lmr,S2= s2), AIC = AIC(lmr,k=2), BIC = AIC(lmr,k=log(n)))
library(leaps)
attach(trainData)
xpred = data.matrix(trainData[,1:12])
out = leaps(xpred, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
best_model = which(out$Cp==min(out$Cp))
cbind(as.matrix(out$which),out$Cp)[best.model,]
best_model = which(out$Cp==min(out$Cp))
cbind(as.matrix(out$which),out$Cp)[best_model,]
best.model = which(out$Cp==min(out$Cp))
#min(out$Cp)
#print(best.model)
#as.matrix(out$which)[best.model,]
cbind(as.matrix(out$which),out$Cp)[best.model,]
View(trainData)
fullmodel <- lm(prodebt~ ., data= trainData)
#summary(fullmodel)
q2_model <- lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
#summary(q2_model)
#forward step model
c(R2 = summary(forward_step)$r.squared, Mallows_CP = Cp(forward_step,S2= 0.6421**2), AIC = AIC(forward_step,k=2))
fullmodel = lm(prodebt ~., data = trainData)
reducedmodel = lm(prodebt ~ 1, data = trainData)
forward_step <- step(reducedmodel, scope = list(lower=reducedmodel,
upper = fullmodel), direction = "forward")
summary(forward_step)
minimum = lm(prodebt ~ 1, data = trainData)
forward_step = step(minimum, scope = list(lower=minimum, upper = slm), direction = "forward")
summary(forward_step)
backward_step = step(slm, scope = list(lower=minimum,
upper = slm), direction = "backward")
summary(backward_step)
fullmodel <- lm(prodebt~ ., data= trainData)
#summary(fullmodel)
q2_model <- lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
#summary(q2_model)
#forward step model
c(R2 = summary(forward_step)$r.squared, Mallows_CP = Cp(forward_step,S2= 0.6421**2), AIC = AIC(forward_step,k=2))
#full model
c(R2 = summary(fullmodel)$r.squared, Mallows_CP = Cp(fullmodel,S2=0.6393**2 ), AIC = AIC(fullmodel,k=2))
#model from q2
c(R2 = summary(q2_model)$r.squared, Mallows_CP = Cp(q2_model,S2=0.6393**2 ), AIC = AIC(q2_model,k=2))
#forward
c(R2 = summary(forward_step)$r.squared, Mallows_CP = Cp(forward_step,S2=summary(forward_step)$sigma**2), AIC = AIC(forward_step,k=2))
#full
c(R2 = summary(slm)$r.squared, Mallows_CP = Cp(fullmodel,S2=summary(slm)$sigma**2 ), AIC = AIC(fullmodel,k=2))
#q2
q2_model = lm(prodebt ~ incomegp + agegp + bsocacct + manage + ccarduse + xmasbuy + locintrn, data=trainData)
#forward
c(R2 = summary(forward_step)$r.squared, Mallows_CP = Cp(forward_step,S2=summary(forward_step)$sigma**2), AIC = AIC(forward_step,k=2))
#full
c(R2 = summary(slm)$r.squared, Mallows_CP = Cp(fullmodel,S2=summary(slm)$sigma**2 ), AIC = AIC(fullmodel,k=2))
#q2
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data=trainData)
c(R2 = summary(q2_model)$r.squared, Mallows_CP = Cp(q2_model,S2=0.6393**2 ), AIC = AIC(q2_model,k=2))
library(MASS)
attach(trainData)
scaled_train = scale(trainData)
View(xpred)
View(trainData)
library(MASS)
attach(trainData)
predictors = cbind(children, locintrn)
predictors = scale(predictors)
prodebt.scaled = scale(prodebt)
#predictors = predictors + c(incomegp,house, singpar, agegp, bankacc, bsocacc, manage, ccarduse,cigbuy , xmasbuy)
lambda = seq(0, 20, by=0.5)
out = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = lambda)
round(out$GCV, 5)
out$GCV[which(out$GCV == min(out$GCV))]
knitr::opts_chunk$set(echo = TRUE)
require(faraway)
data(debt)
fullData = na.omit(debt)
fullData[,'incomegp'] <- as.factor(fullData[,'incomegp'])
fullData[,'house'] <- as.factor(fullData[,'house'])
fullData[,'singpar'] <- as.factor(fullData[,'singpar'])
fullData[,'agegp'] <- as.factor(fullData[,'agegp'])
fullData[,'bankacc'] <- as.factor(fullData[,'bankacc'])
fullData[,'bsocacc'] <- as.factor(fullData[,'bsocacc'])
fullData[,'manage'] <- as.factor(fullData[,'manage'])
fullData[,'ccarduse'] <- as.factor(fullData[,'ccarduse'])
fullData[,'cigbuy'] <- as.factor(fullData[,'cigbuy'])
fullData[,'xmasbuy'] <- as.factor(fullData[,'xmasbuy'])
set.seed(190)
testRows = sample(nrow(fullData), 0.1*nrow(fullData))
testData = fullData[testRows,]
trainData = fullData[-testRows,]
lmr <- glm(prodebt ~ ., data = trainData)
summary(lmr)
confint(lmr, level = 0.95)
confint(lmr, level = 0.99)
library(boot)
cv.glm(trainData, lmr, K= 10)$delta[1]
cv.glm(trainData, lmr, K= nrow(trainData))$delta[1]
library(CombMSC)
c(Mallows_CP = Cp(lmr,S2= 0.6486**2), AIC = AIC(lmr,k=2), BIC = AIC(lmr,k=log(nrow(trainData))))
library(leaps)
attach(trainData)
Xpred_num <- data.matrix(trainData[,1:12])
out <- leaps(Xpred_num, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
#cat_vars <- cbind(incomegp, house, singpar, agegp, bankacc, bsocacc, manage, ccarduse, cigbuy, xmasbuy)
#reg_subsets.out = regsubsets(trainData$prodebt ~ .,data=trainData,  nbest = 1, nvmax = NULL, force.in = NULL, force.out = NULL, method = "exhaustive")
#plot(reg_subsets.out, scale = 'Cp')
best.model = which(out$Cp==min(out$Cp))
#min(out$Cp)
#print(best.model)
#as.matrix(out$which)[best.model,]
cbind(as.matrix(out$which),out$Cp)[best.model,]
fullmodel = lm(prodebt ~., data = trainData)
reducedmodel = lm(prodebt ~ 1, data = trainData)
forward_step = step(reducedmodel, scope = list(lower=reducedmodel,
upper = fullmodel), direction = "forward")
summary(forward_step)
confint(forward_step, level = 0.95)
reducedmodel = lm(prodebt ~ 1, data = trainData)
backward_step <- step(fullmodel, scope = list(lower=reducedmodel,
upper = fullmodel), direction = "backward")
summary(backward_step)
fullmodel <- lm(prodebt~ ., data= trainData)
#summary(fullmodel)
q2_model <- lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
#summary(q2_model)
#forward step model
c(R2 = summary(forward_step)$r.squared, Mallows_CP = Cp(forward_step,S2= 0.6421**2), AIC = AIC(forward_step,k=2))
#full model
c(R2 = summary(fullmodel)$r.squared, Mallows_CP = Cp(fullmodel,S2=0.6393**2 ), AIC = AIC(fullmodel,k=2))
#model from q2
c(R2 = summary(q2_model)$r.squared, Mallows_CP = Cp(q2_model,S2=0.6393**2 ), AIC = AIC(q2_model,k=2))
library(MASS)
#attach(trainData)
predictors <- cbind(children, locintrn)
predictors = scale(predictors)
prodebt.scaled = scale(prodebt)
#predictors = predictors + c(incomegp,house, singpar, agegp, bankacc, bsocacc, manage, ccarduse,cigbuy , xmasbuy)
lambda = seq(0, 10, by=0.25)
out = lm.ridge(prodebt.scaled~predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = lambda)
round(out$GCV, 5)
out$GCV[which(out$GCV == min(out$GCV))]
library(MASS)
attach(trainData)
predictors = cbind(children, locintrn)
predictors = scale(predictors)
prodebt.scaled = scale(prodebt)
#predictors = predictors + c(incomegp,house, singpar, agegp, bankacc, bsocacc, manage, ccarduse,cigbuy , xmasbuy)
lambda = seq(17.5, 25, by=0.5)
out = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = lambda)
round(out$GCV, 5)
out$GCV[which(out$GCV == min(out$GCV))]
library(MASS)
attach(trainData)
predictors = cbind(children, locintrn)
predictors = scale(predictors)
prodebt.scaled = scale(prodebt)
#predictors = predictors + c(incomegp,house, singpar, agegp, bankacc, bsocacc, manage, ccarduse,cigbuy , xmasbuy)
lambda = seq(25, 50, by=1)
out = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = lambda)
round(out$GCV, 5)
out$GCV[which(out$GCV == min(out$GCV))]
library(MASS)
attach(trainData)
predictors = cbind(children, locintrn)
predictors = scale(predictors)
prodebt.scaled = scale(prodebt)
#predictors = predictors + c(incomegp,house, singpar, agegp, bankacc, bsocacc, manage, ccarduse,cigbuy , xmasbuy)
lambda = seq(50, 100, by=1)
out = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = lambda)
round(out$GCV, 5)
out$GCV[which(out$GCV == min(out$GCV))]
library(MASS)
attach(trainData)
predictors = cbind(children, locintrn)
predictors = scale(predictors)
prodebt.scaled = scale(prodebt)
#predictors = predictors + c(incomegp,house, singpar, agegp, bankacc, bsocacc, manage, ccarduse,cigbuy , xmasbuy)
lambda = seq(0, 100, by=1)
out = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = lambda)
round(out$GCV, 5)
out$GCV[which(out$GCV == min(out$GCV))]
round(out$coef[,41], 4)
round(out$coef[,76], 4)
library(glmnet)
Xpred = cbind(predictors, incomegp, house, singpar, agegp, bankacc, bsocacc, manage, ccarduse, cigbuy, xmasbuy)
lasso_model = cv.glmnet(Xpred, prodebt.scaled, alpha =1, nfolds = 10)
lasso_model$lambda.min
library(glmnet)
Xpred <- cbind(predictors, incomegp, house, singpar, agegp, bankacc, bsocacc, manage, ccarduse, cigbuy, xmasbuy)
lasso.fit <- cv.glmnet(Xpred, prodebt.scaled, alpha =1, nfolds = 10)
lasso.fit$lambda.min
library(glmnet)
Xpred <- cbind(predictors, incomegp, house, singpar, agegp, bankacc, bsocacc, manage, ccarduse, cigbuy, xmasbuy)
lasso.fit <- cv.glmnet(Xpred, prodebt.scaled, alpha =1, nfolds = 10)
lasso.fit$lambda.min
lasso_model2 = glmnet(Xpred, prodebt, alpha = 1, nlambda = 100)
coef(lasso_model2,s=lasso_model$lambda.min)
plot(lasso_model2,xvar="lambda",lwd=2)
abline(v=log(lasso_model$lambda.min),col='black',lty = 2,lwd=2)
elastic_net.fit =cv.glmnet(Xpred,prodebt,alpha=0.5,nfolds=10)
elastic_net = glmnet(Xpred, prodebt, alpha = 0.5, nlambda = 100)
coef(elastic_net,s=elastic_net.fit$lambda.min)
plot(elastic_net,xvar="lambda",lwd=2)
abline(v=log(elastic_net.fit$lambda.min),col='black',lty = 2,lwd=2)
elastic_net.fit$lambda.min
fullmodel_pred = predict(slm, testData, interval = 'prediction')
fullmodel <- lm(prodebt~ ., data= trainData)
#summary(fullmodel)
q2_model <- lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
#summary(q2_model)
fullmodel_pred <- predict(fullmodel, testData, interval = 'prediction')
q2_model_pred <- predict(q2_model, testData, interval = 'prediction')
forward_step_pred <- predict(forward_step, testData, interval = 'prediction')
backward_step_pred <- predict(backward_step, testData, interval = 'prediction')
#scaled_test <- cbind(scale(trainData$children), scale(trainData$locintrn))
#ridge_pred <- as.matrix(cbind(const=1,trainData[,12])) %*% coef(out)
best_lasso_model <- glmnet(Xpred, prodebt, alpha = 1, lambda = lasso.fit$lambda.min)
lasso_pred <- predict(best_lasso_model, newx = data.matrix(testData[, 1:12]), s = lasso.fit$lambda.min, interval = 'prediction')
best_elastic_net_model <- glmnet(Xpred, prodebt, alpha = 0.5, lambda = elastic_net.fit$lambda.min )
elastic_net_pred <- predict(best_elastic_net_model, newx=data.matrix(testData[, 1:12]), s = elastic_net.fit$lambda.min, interval = 'prediction')
fullmodel = lm(prodebt~ ., data= trainData)
fullmodel_pred = predict(fullmodel, testData, interval = 'prediction')
q2_model_pred = predict(best_model, testData, interval = 'prediction')
fullmodel = lm(prodebt~ ., data= trainData)
fullmodel_pred = predict(fullmodel, testData, interval = 'prediction')
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
q2_model_pred = predict(q2_model, testData, interval = 'prediction')
forward_step_pred = predict(forward_step, testData, interval = 'prediction')
backward_step_pred = predict(backward_step, testData, interval = 'prediction')
best_lasso = glmnet(Xpred, prodebt, alpha = 1, lambda = lasso_model$lambda.min)
lasso_pred = predict(best_lasso, newx = data.matrix(testData[, 1:12]), s = lasso_model$lambda.min, interval = 'prediction')
best_elasticnet = glmnet(Xpred, prodebt, alpha = 0.5, lambda = elastic_net.fit$lambda.min )
elastic_net_pred = predict(best_elasticnet, newx=data.matrix(testData[, 1:12]), s = elastic_net.fit$lambda.min, interval = 'prediction')
fullmodel_pred <- predict(fullmodel, testData, interval = 'prediction')
q2_model_pred <- predict(q2_model, testData, interval = 'prediction')
forward_step_pred <- predict(forward_step, testData, interval = 'prediction')
backward_step_pred <- predict(backward_step, testData, interval = 'prediction')
#scaled_test <- cbind(scale(trainData$children), scale(trainData$locintrn))
#ridge_pred <- as.matrix(cbind(const=1,trainData[,12])) %*% coef(out)
best_lasso_model <- glmnet(Xpred, prodebt, alpha = 1, lambda = lasso.fit$lambda.min)
lasso_pred <- predict(best_lasso_model, newx = data.matrix(testData[, 1:12]), s = lasso.fit$lambda.min, interval = 'prediction')
best_elastic_net_model <- glmnet(Xpred, prodebt, alpha = 0.5, lambda = elastic_net.fit$lambda.min )
elastic_net_pred <- predict(best_elastic_net_model, newx=data.matrix(testData[, 1:12]), s = elastic_net.fit$lambda.min, interval = 'prediction')
test_prodebt <- testData[,13]
c('full model mspe' = mean((test_prodebt - fullmodel_pred[1] )^2),'lowest mallows cp model mspe' =mean((test_prodebt - q2_model_pred[1] )^2),'forward step model mspe' =mean((test_prodebt - forward_step_pred[1] )^2),'backward step model mspe' =mean((test_prodebt - backward_step_pred[1] )^2),'lasso model mspe' =mean((test_prodebt - lasso_pred[1] )^2),'elastic net mspe' =mean((test_prodebt - elastic_net_pred[1] )^2))
#forward
c(R2 = summary(forward_step)$r.squared, Mallows_CP = Cp(forward_step,S2=summary(forward_step)$sigma**2), AIC = AIC(forward_step,k=2))
#full
c(R2 = summary(slm)$r.squared, Mallows_CP = Cp(fullmodel,S2=summary(slm)$sigma**2 ), AIC = AIC(fullmodel,k=2))
#q2
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data=trainData)
c(R2 = summary(q2_model)$r.squared, Mallows_CP = Cp(q2_model,S2=summary(q2_model)$sigma**2 ), AIC = AIC(q2_model,k=2))
fullmodel = lm(prodebt~ ., data= trainData)
fullmodel_pred = predict(fullmodel, testData, interval = 'prediction')
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
q2_model_pred = predict(q2_model, testData, interval = 'prediction')
forward_step_pred = predict(forward_step, testData, interval = 'prediction')
backward_step_pred = predict(backward_step, testData, interval = 'prediction')
best_lasso = glmnet(Xpred, prodebt, alpha = 1, lambda = lasso_model$lambda.min)
lasso_pred = predict(best_lasso, newx = data.matrix(testData[, 1:12]), s = lasso_model$lambda.min, interval = 'prediction')
best_elasticnet = glmnet(Xpred, prodebt, alpha = 0.5, lambda = elastic_net.fit$lambda.min )
elastic_net_pred = predict(best_elasticnet, newx=data.matrix(testData[, 1:12]), s = elastic_net.fit$lambda.min, interval = 'prediction')
fullmodel_pred
fullmodel = lm(prodebt~ ., data= trainData)
fullmodel_pred = predict(fullmodel, testData, interval = 'prediction')
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
q2_model_pred = predict(q2_model, testData, interval = 'prediction')
forward_step_pred = predict(forward_step, testData, interval = 'prediction')
backward_step_pred = predict(backward_step, testData, interval = 'prediction')
best_lasso = glmnet(Xpred, prodebt, alpha = 1, lambda = lasso_model$lambda.min)
lasso_pred = predict(best_lasso, newx = data.matrix(testData[, 1:12]), s = lasso_model$lambda.min, interval = 'prediction')
best_elasticnet = glmnet(Xpred, prodebt, alpha = 0.5, lambda = elastic_net.fit$lambda.min )
elastic_net_pred = predict(best_elasticnet, newx=data.matrix(testData[, 1:12]), s = elastic_net.fit$lambda.min, interval = 'prediction')
print(fullmodel_pred)
fullmodel = lm(prodebt~ ., data= trainData)
fullmodel_pred = predict(fullmodel, testData, interval = 'prediction')
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
q2_model_pred = predict(q2_model, testData, interval = 'prediction')
forward_step_pred = predict(forward_step, testData, interval = 'prediction')
backward_step_pred = predict(backward_step, testData, interval = 'prediction')
best_lasso = glmnet(Xpred, prodebt, alpha = 1, lambda = lasso_model$lambda.min)
lasso_pred = predict(best_lasso, newx = data.matrix(testData[, 1:12]), s = lasso_model$lambda.min, interval = 'prediction')
best_elasticnet = glmnet(Xpred, prodebt, alpha = 0.5, lambda = elastic_net.fit$lambda.min )
elastic_net_pred = predict(best_elasticnet, newx=data.matrix(testData[, 1:12]), s = elastic_net.fit$lambda.min, interval = 'prediction')
print("Full Model")
print(fullmodel_pred)
fullmodel = lm(prodebt~ ., data= trainData)
fullmodel_pred = predict(fullmodel, testData, interval = 'prediction')
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
q2_model_pred = predict(q2_model, testData, interval = 'prediction')
forward_step_pred = predict(forward_step, testData, interval = 'prediction')
backward_step_pred = predict(backward_step, testData, interval = 'prediction')
ridge = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = 76)
ridge_pred = predict(ridge, testData, interval = 'prediction')
fullmodel = lm(prodebt~ ., data= trainData)
fullmodel_pred = predict(fullmodel, testData, interval = 'prediction')
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
q2_model_pred = predict(q2_model, testData, interval = 'prediction')
forward_step_pred = predict(forward_step, testData, interval = 'prediction')
backward_step_pred = predict(backward_step, testData, interval = 'prediction')
ridge = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = 76)
#ridge_pred = predict(ridge, testData, interval = 'prediction')
best_lasso = glmnet(Xpred, prodebt, alpha = 1, lambda = lasso_model$lambda.min)
lasso_pred = predict(best_lasso, newx = data.matrix(testData[, 1:12]), s = lasso_model$lambda.min, interval = 'prediction')
best_elasticnet = glmnet(Xpred, prodebt, alpha = 0.5, lambda = elastic_net.fit$lambda.min )
elastic_net_pred = predict(best_elasticnet, newx=data.matrix(testData[, 1:12]), s = elastic_net.fit$lambda.min, interval = 'prediction')
print("Full Model")
print(fullmodel_pred)
print("Q2 Model")
print(q2_model_pred)
print("Forward Model")
print(forward_step_pred)
print("Backward Model")
print(backward_step_pred)
#print("Ridge Model")
#print(ridge_pred)
print("Lasso Model")
print(lasso_pred)
print("Elasticnet Model")
print(elastic_net_pred)
test_prodebt = testData[,13]
c('full MSPE' = mean((test_prodebt - fullmodel_pred[1] )^2),'lowest mallows cp MSPE' =mean((test_prodebt - q2_model_pred[1] )^2),'forward step MSPE' =mean((test_prodebt - forward_step_pred[1] )^2),'backward step MSPE' =mean((test_prodebt - backward_step_pred[1] )^2),'lasso MSPE' =mean((test_prodebt - lasso_pred[1] )^2),'elastic net MSPE' =mean((test_prodebt - elastic_net_pred[1] )^2))
zero = rep(0, 6)
colnames(fullData[,1:12])
variable_selection = data.frame(incomegp =zero, house =zero, children =zero,signpar =zero,agegp =zero, bankacc =zero, bsocacc =zero, manage =zero,ccarduse =zero,cigbuy =zero,xmasbuy =zero,locintrn =zero,row.names = c('full model', 'lowest mallows cp model', 'forward step model', 'backward step model', 'lasso model', 'elastic net model'))
variable_selection['full model',  ] <- 1
variable_selection['lowest mallows cp model', c('incomegp', 'agegp', 'bsocacc', 'manage', 'ccarduse', 'xmasbuy', 'locintrn')] <- 1
variable_selection['forward step model' ,c('bankacc', 'agegp', 'manage', 'ccarduse', 'xmasbuy', 'locintrn')] <- 1
variable_selection['backward step model' ,c('bankacc', 'agegp', 'manage', 'ccarduse', 'xmasbuy', 'locintrn')] <- 1
variable_selection['lasso model', -4] <- 1
variable_selection['elastic net model', -4] <- 1
variable_selection
zero = rep(0, 6)
colnames(fullData[,1:12])
variable_selection = data.frame(incomegp =zero, house =zero, children =zero,signpar =zero,agegp =zero, bankacc =zero, bsocacc =zero, manage =zero,ccarduse =zero,cigbuy =zero,xmasbuy =zero,locintrn =zero, row.names = c('full model', 'lowest mallows cp model', 'forward step model', 'backward step model', 'lasso model', 'elastic net model'))
variable_selection['full model',  ] = 1
variable_selection['lowest mallows cp model', c('incomegp', 'agegp', 'bsocacc', 'manage', 'ccarduse', 'xmasbuy', 'locintrn')] = 1
variable_selection['forward step model' ,c('bankacc', 'agegp', 'manage', 'ccarduse', 'xmasbuy', 'locintrn')] = 1
variable_selection['backward step model' ,c('bankacc', 'agegp', 'manage', 'ccarduse', 'xmasbuy', 'locintrn')] = 1
variable_selection['lasso model', -4] = 1
variable_selection['elastic net model', -4] = 1
variable_selection
knitr::opts_chunk$set(echo = TRUE)
# Transform the categorical variables into dummy vars
require(faraway)
data(debt)
fullData=na.omit(debt)
fullData$ccarduse = as.factor(fullData$ccarduse)
fullData$incomegp = as.factor(fullData$incomegp)
fullData$house = as.factor(fullData$house)
fullData$agegp = as.factor(fullData$agegp)
fullData$manage = as.factor(fullData$manage)
#dmy = dummyVars(" ~ .", data = fullData)
#fullData = data.frame(predict(dmy, newdata = fullData))
set.seed(190)
testRows=sample(nrow(fullData),0.1*nrow(fullData))
testData=fullData[testRows, ]
trainData=fullData[-testRows, ]
slr = glm(prodebt ~., data = trainData)
summary(slr)
library(boot)
cv.glm(trainData, slr, K= 10)$delta[1]
cv.glm(trainData, slr, K= nrow(trainData))$delta[1]
library(CombMSC)
slm = lm(prodebt~.,data=trainData)
s2 = summary(slm)$sigma**2
n = nrow(trainData)
c(Mallows_CP = Cp(lmr,S2= s2), AIC = AIC(lmr,k=2), BIC = AIC(lmr,k=log(n)))
library(leaps)
attach(trainData)
xpred = data.matrix(trainData[,1:12])
out = leaps(xpred, prodebt, method = "Cp")
cbind(as.matrix(out$which),out$Cp)
best_model = which(out$Cp==min(out$Cp))
cbind(as.matrix(out$which),out$Cp)[best_model,]
minimum = lm(prodebt ~ 1, data = trainData)
forward_step = step(minimum, scope = list(lower=minimum, upper = slm), direction = "forward")
summary(forward_step)
backward_step = step(slm, scope = list(lower=minimum,
upper = slm), direction = "backward")
summary(backward_step)
#forward
c(R2 = summary(forward_step)$r.squared, Mallows_CP = Cp(forward_step,S2=summary(forward_step)$sigma**2), AIC = AIC(forward_step,k=2))
#full
c(R2 = summary(slm)$r.squared, Mallows_CP = Cp(fullmodel,S2=summary(slm)$sigma**2 ), AIC = AIC(fullmodel,k=2))
#q2
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data=trainData)
c(R2 = summary(q2_model)$r.squared, Mallows_CP = Cp(q2_model,S2=summary(q2_model)$sigma**2 ), AIC = AIC(q2_model,k=2))
library(MASS)
attach(trainData)
predictors = cbind(children, locintrn)
predictors = scale(predictors)
prodebt.scaled = scale(prodebt)
#predictors = predictors + c(incomegp,house, singpar, agegp, bankacc, bsocacc, manage, ccarduse,cigbuy , xmasbuy)
lambda = seq(0, 100, by=1)
out = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = lambda)
round(out$GCV, 5)
out$GCV[which(out$GCV == min(out$GCV))]
round(out$coef[,76], 4)
library(glmnet)
Xpred = cbind(predictors, incomegp, house, singpar, agegp, bankacc, bsocacc, manage, ccarduse, cigbuy, xmasbuy)
lasso_model = cv.glmnet(Xpred, prodebt.scaled, alpha =1, nfolds = 10)
lasso_model$lambda.min
lasso_model2 = glmnet(Xpred, prodebt, alpha = 1, nlambda = 100)
coef(lasso_model2,s=lasso_model$lambda.min)
plot(lasso_model2,xvar="lambda",lwd=2)
abline(v=log(lasso_model$lambda.min),col='black',lty = 2,lwd=2)
elastic_net.fit =cv.glmnet(Xpred,prodebt,alpha=0.5,nfolds=10)
elastic_net = glmnet(Xpred, prodebt, alpha = 0.5, nlambda = 100)
coef(elastic_net,s=elastic_net.fit$lambda.min)
plot(elastic_net,xvar="lambda",lwd=2)
abline(v=log(elastic_net.fit$lambda.min),col='black',lty = 2,lwd=2)
elastic_net.fit$lambda.min
fullmodel = lm(prodebt~ ., data= trainData)
fullmodel_pred = predict(fullmodel, testData, interval = 'prediction')
q2_model = lm(prodebt ~ incomegp + agegp + bsocacc + manage + ccarduse + xmasbuy + locintrn, data = trainData)
q2_model_pred = predict(q2_model, testData, interval = 'prediction')
forward_step_pred = predict(forward_step, testData, interval = 'prediction')
backward_step_pred = predict(backward_step, testData, interval = 'prediction')
ridge = lm.ridge(prodebt.scaled ~ predictors + incomegp + house + singpar + agegp + bankacc + bsocacc + manage + ccarduse + cigbuy + xmasbuy, data = trainData, lambda = 76)
#ridge_pred = predict(ridge, testData, interval = 'prediction')
best_lasso = glmnet(Xpred, prodebt, alpha = 1, lambda = lasso_model$lambda.min)
lasso_pred = predict(best_lasso, newx = data.matrix(testData[, 1:12]), s = lasso_model$lambda.min, interval = 'prediction')
best_elasticnet = glmnet(Xpred, prodebt, alpha = 0.5, lambda = elastic_net.fit$lambda.min )
elastic_net_pred = predict(best_elasticnet, newx=data.matrix(testData[, 1:12]), s = elastic_net.fit$lambda.min, interval = 'prediction')
print("Full Model")
print(fullmodel_pred)
print("Q2 Model")
print(q2_model_pred)
print("Forward Model")
print(forward_step_pred)
print("Backward Model")
print(backward_step_pred)
#print("Ridge Model")
#print(ridge_pred)
print("Lasso Model")
print(lasso_pred)
print("Elasticnet Model")
print(elastic_net_pred)
test_prodebt = testData[,13]
c('full MSPE' = mean((test_prodebt - fullmodel_pred[1] )^2),'lowest mallows cp MSPE' =mean((test_prodebt - q2_model_pred[1] )^2),'forward step MSPE' =mean((test_prodebt - forward_step_pred[1] )^2),'backward step MSPE' =mean((test_prodebt - backward_step_pred[1] )^2),'lasso MSPE' =mean((test_prodebt - lasso_pred[1] )^2),'elastic net MSPE' =mean((test_prodebt - elastic_net_pred[1] )^2))
library(CombMSC)
slm = lm(prodebt~.,data=trainData)
s2 = summary(slm)$sigma**2
n = nrow(trainData)
c(Mallows_CP = Cp(lmr,S2= s2), AIC = AIC(lmr,k=2), BIC = AIC(lmr,k=log(n)))
library(CombMSC)
slm = lm(prodebt~.,data=trainData)
s2 = summary(slm)$sigma**2
n = nrow(trainData)
c(Mallows_CP = Cp(slm,S2= s2), AIC = AIC(slm,k=2), BIC = AIC(slm,k=log(n)))
setwd("~/GitHub/6414_project/datasets")
